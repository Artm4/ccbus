/* PhpParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PhpParser.java */
package ccbus.tool.parser.php;

public  class PhpParser/*@bgen(jjtree)*/implements PhpParserTreeConstants, PhpParserConstants {/*@bgen(jjtree)*/
  protected JJTPhpParserState jjtree = new JJTPhpParserState();private static PhpParser parser ;

        public static void main ( String args [ ] ) {

                if(args.length == 0){
                        System.out.println("PHP Parser Version 0.1Alpha:  Reading from standard input . . .");
                        parser = new PhpParser(System.in);
                } else if (args.length == 1) {
                        System.out.println("PHP Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
                        try {
                                parser = new PhpParser(new java.io.FileInputStream(args[0]));
                        }
                        catch(java.io.FileNotFoundException e){
                                System.out.println("PHP Parser Version 0.1:  File " + args[0] + " not found.");
                                return ;
                        }
                } else {
                        System.out.println("PHP Parser Version 0.1Alpha:  Usage is one of:");
                        System.out.println("         java PHP < inputfile");
                        System.out.println("OR");
                        System.out.println("         java PHP inputfile");
                        return ;
                }
                parser.token_source.SwitchTo(HTML_STATE);
                try {
                        parser.PhpPage();
                        System.out.println("PHP Parser Version 0.1Alpha:  PHP program parsed successfully.");
                }
                catch(ParseException e) {
                        System.out.println("PHP Parser Version 0.1Alpha:  Encountered errors during parse.");
                        System.out.println(e.getMessage());
                }
        }

        void jjtreeOpenNodeScope(Node n)
    {
        n.getId();
    }

    void jjtreeCloseNodeScope(Node n)
    {
        n.getId();
    }

  final public void PhpPage() throws ParseException {
    trace_call("PhpPage");
    try {/*@bgen(jjtree) PhpPage */
  ASTPhpPage jjtn000 = new ASTPhpPage(JJTPHPPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PHP_EXPR:
          case HTML_OTHER:
          case HTML:{
            ;
            break;
            }
          default:
            break label_1;
          }
          HtmlBlock();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PHP_BEGIN:{
          jj_consume_token(PHP_BEGIN);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case DOUBLE_STRING_LITERAL_START:
            case SINGLE_STRING_LITERAL_START:
            case HEREDOC_START:
            case REQUIRE_ONCE:
            case REQUIRE:
            case INCLUDE_ONCE:
            case INCLUDE:
            case DEFINE:
            case ECHO:
            case PRINT:
            case SWITCH:
            case CASE:
            case DFLT:
            case BREAK:
            case RETURN:
            case DO:
            case WHILE:
            case FOREACH:
            case FOR:
            case CONTINUE:
            case IF:
            case FUNCTION:
            case CLASS:
            case VAR:
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
            case ABSTRACT:
            case FINAL:
            case STATIC:
            case INTERFACE:
            case CONST:
            case CLONE:
            case GLOBAL:
            case ARRAY:
            case NEW:
            case PREDEFINED_CONSTANT:
            case PHP_END:
            case DOLLAR:
            case SEMICOLON:
            case TRY:
            case THROW:
            case IDENTIFIER:
            case 105:
            case 109:
            case 112:
            case 114:
            case 142:
            case 147:
            case 148:
            case 149:
            case 150:{
              ;
              break;
              }
            default:
              break label_2;
            }
            Statement();
          }
          break;
          }
        case 0:{
          jj_consume_token(0);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("PhpPage");
    }
  }

  final public void HtmlBlock() throws ParseException {
    trace_call("HtmlBlock");
    try {/*@bgen(jjtree) HtmlBlock */
  ASTHtmlBlock jjtn000 = new ASTHtmlBlock(JJTHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HTML:{
          jj_consume_token(HTML);
          break;
          }
        case HTML_OTHER:{
          jj_consume_token(HTML_OTHER);
          break;
          }
        case PHP_EXPR:{
          jj_consume_token(PHP_EXPR);
          Expression();
          jj_consume_token(PHP_END);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("HtmlBlock");
    }
  }

  final public void Statement() throws ParseException {
    trace_call("Statement");
    try {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_1(2)) {
          LabeledStatement();
        } else if (jj_2_2(2)) {
          ClassDeclaration();
        } else if (jj_2_3(2)) {
          InterfaceDeclaration();
        } else if (jj_2_4(2)) {
          ExpressionStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 109:{
            CompoundStatement();
            break;
            }
          case SWITCH:
          case IF:{
            SelectionStatement();
            break;
            }
          case DO:
          case WHILE:
          case FOREACH:
          case FOR:{
            IterationStatement();
            break;
            }
          case BREAK:
          case RETURN:
          case CONTINUE:{
            JumpStatement();
            break;
            }
          case REQUIRE_ONCE:
          case REQUIRE:
          case INCLUDE_ONCE:
          case INCLUDE:
          case 114:{
            IncludeStatement();
            break;
            }
          case ECHO:
          case PRINT:{
            EchoStatement();
            break;
            }
          case DEFINE:{
            DefineStatement();
            break;
            }
          case FUNCTION:
          case VAR:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case FINAL:
          case STATIC:
          case CONST:
          case GLOBAL:
          case DOLLAR:{
            MemberDeclaration();
            break;
            }
          case THROW:{
            ThrowStatement();
            break;
            }
          case TRY:{
            TryBlock();
            break;
            }
          case PHP_END:
          case SEMICOLON:{
            EndOfStatement();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Statement");
    }
  }

  final public void ThrowStatement() throws ParseException {
    trace_call("ThrowStatement");
    try {/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(THROW);
        ClassInstantiation();
        EndOfStatement();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ThrowStatement");
    }
  }

  final public void TryBlock() throws ParseException {
    trace_call("TryBlock");
    try {/*@bgen(jjtree) TryBlock */
  ASTTryBlock jjtn000 = new ASTTryBlock(JJTTRYBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(TRY);
        CompoundStatement();
        label_3:
        while (true) {
          jj_consume_token(CATCH);
          jj_consume_token(105);
          jj_consume_token(IDENTIFIER);
          Variable();
          jj_consume_token(106);
          CompoundStatement();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CATCH:{
            ;
            break;
            }
          default:
            break label_3;
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("TryBlock");
    }
  }

  final public void EndOfStatement() throws ParseException {
    trace_call("EndOfStatement");
    try {/*@bgen(jjtree) EndOfStatement */
  ASTEndOfStatement jjtn000 = new ASTEndOfStatement(JJTENDOFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMICOLON:{
          jj_consume_token(SEMICOLON);
          break;
          }
        case PHP_END:{
          EmbeddedHtml();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("EndOfStatement");
    }
  }

  final public void EmbeddedHtml() throws ParseException {
    trace_call("EmbeddedHtml");
    try {/*@bgen(jjtree) EmbeddedHtml */
  ASTEmbeddedHtml jjtn000 = new ASTEmbeddedHtml(JJTEMBEDDEDHTML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(PHP_END);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case HTML_OTHER:
          case HTML:{
            ;
            break;
            }
          default:
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case HTML:{
            jj_consume_token(HTML);
            break;
            }
          case HTML_OTHER:{
            jj_consume_token(HTML_OTHER);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PHP_BEGIN:{
          jj_consume_token(PHP_BEGIN);
          break;
          }
        case 0:{
          jj_consume_token(0);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("EmbeddedHtml");
    }
  }

  final public void DefineStatement() throws ParseException {
    trace_call("DefineStatement");
    try {/*@bgen(jjtree) DefineStatement */
  ASTDefineStatement jjtn000 = new ASTDefineStatement(JJTDEFINESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(DEFINE);
        jj_consume_token(105);
        String();
        jj_consume_token(107);
        Expression();
        jj_consume_token(106);
        EndOfStatement();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("DefineStatement");
    }
  }

  final public void LabeledStatement() throws ParseException {
    trace_call("LabeledStatement");
    try {/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          jj_consume_token(CASE);
          Expression();
          jj_consume_token(108);
          Statement();
          break;
          }
        case DFLT:{
          jj_consume_token(DFLT);
          jj_consume_token(108);
          Statement();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("LabeledStatement");
    }
  }

  final public void ExpressionStatement() throws ParseException {
    trace_call("ExpressionStatement");
    try {/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        Expression();
        EndOfStatement();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ExpressionStatement");
    }
  }

  final public void CompoundStatement() throws ParseException {
    trace_call("CompoundStatement");
    try {/*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = new ASTCompoundStatement(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(109);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case REQUIRE_ONCE:
          case REQUIRE:
          case INCLUDE_ONCE:
          case INCLUDE:
          case DEFINE:
          case ECHO:
          case PRINT:
          case SWITCH:
          case CASE:
          case DFLT:
          case BREAK:
          case RETURN:
          case DO:
          case WHILE:
          case FOREACH:
          case FOR:
          case CONTINUE:
          case IF:
          case FUNCTION:
          case CLASS:
          case VAR:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case FINAL:
          case STATIC:
          case INTERFACE:
          case CONST:
          case CLONE:
          case GLOBAL:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case PHP_END:
          case DOLLAR:
          case SEMICOLON:
          case TRY:
          case THROW:
          case IDENTIFIER:
          case 105:
          case 109:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            ;
            break;
            }
          default:
            break label_5;
          }
          Statement();
        }
        jj_consume_token(110);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("CompoundStatement");
    }
  }

  final public void SelectionStatement() throws ParseException {
    trace_call("SelectionStatement");
    try {/*@bgen(jjtree) SelectionStatement */
  ASTSelectionStatement jjtn000 = new ASTSelectionStatement(JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          jj_consume_token(IF);
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
          Statement();
          label_6:
          while (true) {
            if (jj_2_5(2)) {
              ;
            } else {
              break label_6;
            }
            jj_consume_token(ELSEIF);
            jj_consume_token(105);
            Expression();
            jj_consume_token(106);
            Statement();
          }
          if (jj_2_6(2)) {
            jj_consume_token(ELSE);
            Statement();
          } else {
            ;
          }
          break;
          }
        case SWITCH:{
          jj_consume_token(SWITCH);
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
          Statement();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("SelectionStatement");
    }
  }

  final public void IterationStatement() throws ParseException {
    trace_call("IterationStatement");
    try {/*@bgen(jjtree) IterationStatement */
  ASTIterationStatement jjtn000 = new ASTIterationStatement(JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHILE:{
          jj_consume_token(WHILE);
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
          Statement();
          break;
          }
        case DO:{
          jj_consume_token(DO);
          Statement();
          jj_consume_token(WHILE);
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
          EndOfStatement();
          break;
          }
        case FOR:{
          jj_consume_token(FOR);
          jj_consume_token(105);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            Expression();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            Expression();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            Expression();
            break;
            }
          default:
            ;
          }
          jj_consume_token(106);
          Statement();
          break;
          }
        case FOREACH:{
          jj_consume_token(FOREACH);
          jj_consume_token(105);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            Expression();
            break;
            }
          default:
            ;
          }
          jj_consume_token(AS);
          Variable();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 111:{
            jj_consume_token(111);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 112:{
              jj_consume_token(112);
              break;
              }
            default:
              ;
            }
            Variable();
            break;
            }
          default:
            ;
          }
          jj_consume_token(106);
          Statement();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("IterationStatement");
    }
  }

  final public void JumpStatement() throws ParseException {
    trace_call("JumpStatement");
    try {/*@bgen(jjtree) JumpStatement */
  ASTJumpStatement jjtn000 = new ASTJumpStatement(JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONTINUE:{
          jj_consume_token(CONTINUE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:{
            jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            ;
          }
          EndOfStatement();
          break;
          }
        case BREAK:{
          jj_consume_token(BREAK);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:{
            jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            ;
          }
          EndOfStatement();
          break;
          }
        case RETURN:{
          jj_consume_token(RETURN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            Expression();
            break;
            }
          default:
            ;
          }
          EndOfStatement();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("JumpStatement");
    }
  }

  final public void ParameterList() throws ParseException {
    trace_call("ParameterList");
    try {/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        Parameter();
        label_7:
        while (true) {
          if (jj_2_7(2)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(107);
          Parameter();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ParameterList");
    }
  }

  final public void Parameter() throws ParseException {
    trace_call("Parameter");
    try {/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 112:{
          jj_consume_token(112);
          break;
          }
        default:
          ;
        }
        Variable();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 113:{
          jj_consume_token(113);
          Expression();
          break;
          }
        default:
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Parameter");
    }
  }

  final public void ClassDeclaration() throws ParseException {
    trace_call("ClassOrInterfaceBody");
    try {/*@bgen(jjtree) ClassOrInterfaceBody */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case FINAL:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:{
            jj_consume_token(ABSTRACT);
            break;
            }
          case FINAL:{
            jj_consume_token(FINAL);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          ;
        }
        jj_consume_token(CLASS);
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXTENDS:{
          jj_consume_token(EXTENDS);
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPLEMENTS:{
          jj_consume_token(IMPLEMENTS);
          jj_consume_token(IDENTIFIER);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 107:{
              ;
              break;
              }
            default:
              break label_8;
            }
            jj_consume_token(107);
            jj_consume_token(IDENTIFIER);
          }
          break;
          }
        default:
          ;
        }
        ClassMembers();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ClassOrInterfaceBody");
    }
  }

  final public void ClassMembers() throws ParseException {
    trace_call("ClassMembers");
    try {/*@bgen(jjtree) ClassMembers */
  ASTClassMembers jjtn000 = new ASTClassMembers(JJTCLASSMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(109);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNCTION:
          case VAR:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case ABSTRACT:
          case FINAL:
          case STATIC:
          case CONST:
          case GLOBAL:
          case DOLLAR:{
            ;
            break;
            }
          default:
            break label_9;
          }
          MemberDeclaration();
        }
        jj_consume_token(110);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ClassMembers");
    }
  }

  final public void MemberDeclaration() throws ParseException {
    trace_call("MemberDeclaration");
    try {/*@bgen(jjtree) MemberDeclaration */
  ASTMemberDeclaration jjtn000 = new ASTMemberDeclaration(JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_8(2147483647)) {
          label_10:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
            case FINAL:
            case STATIC:{
              ;
              break;
              }
            default:
              break label_10;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FINAL:{
              jj_consume_token(FINAL);
              break;
              }
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:{
              Visibility();
              break;
              }
            case STATIC:{
              jj_consume_token(STATIC);
              break;
              }
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(FUNCTION);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 112:{
            jj_consume_token(112);
            break;
            }
          default:
            ;
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(105);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOLLAR:
          case IDENTIFIER:
          case 112:{
            ParameterList();
            break;
            }
          default:
            ;
          }
          jj_consume_token(106);
          CompoundStatement();
        } else if (jj_2_9(2147483647)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:{
            Visibility();
            break;
            }
          default:
            ;
          }
          jj_consume_token(CONST);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(113);
          Expression();
          EndOfStatement();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VAR:
          case PUBLIC:
          case PRIVATE:
          case PROTECTED:
          case STATIC:
          case DOLLAR:{
            label_11:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case VAR:
              case PUBLIC:
              case PRIVATE:
              case PROTECTED:
              case STATIC:{
                ;
                break;
                }
              default:
                break label_11;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case VAR:{
                jj_consume_token(VAR);
                break;
                }
              case PUBLIC:
              case PRIVATE:
              case PROTECTED:{
                Visibility();
                break;
                }
              case STATIC:{
                jj_consume_token(STATIC);
                break;
                }
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            VariableDeclarator();
            label_12:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case 107:{
                ;
                break;
                }
              default:
                break label_12;
              }
              jj_consume_token(107);
              VariableDeclarator();
            }
            EndOfStatement();
            break;
            }
          case GLOBAL:{
            jj_consume_token(GLOBAL);
            Variable();
            label_13:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case 107:{
                ;
                break;
                }
              default:
                break label_13;
              }
              jj_consume_token(107);
              Variable();
            }
            EndOfStatement();
            break;
            }
          case ABSTRACT:{
            jj_consume_token(ABSTRACT);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:{
              Visibility();
              break;
              }
            default:
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case STATIC:{
              jj_consume_token(STATIC);
              break;
              }
            default:
              ;
            }
            jj_consume_token(FUNCTION);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 112:{
              jj_consume_token(112);
              break;
              }
            default:
              ;
            }
            jj_consume_token(IDENTIFIER);
            jj_consume_token(105);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DOLLAR:
            case IDENTIFIER:
            case 112:{
              ParameterList();
              break;
              }
            default:
              ;
            }
            jj_consume_token(106);
            EndOfStatement();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("MemberDeclaration");
    }
  }

  final public void InterfaceDeclaration() throws ParseException {
    trace_call("InterfaceDeclaration");
    try {/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(INTERFACE);
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXTENDS:{
          jj_consume_token(EXTENDS);
          jj_consume_token(IDENTIFIER);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 107:{
              ;
              break;
              }
            default:
              break label_14;
            }
            jj_consume_token(107);
            jj_consume_token(IDENTIFIER);
          }
          break;
          }
        default:
          ;
        }
        InterfaceMembers();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("InterfaceDeclaration");
    }
  }

  final public void VariableDeclarator() throws ParseException {
    trace_call("VariableDeclarator");
    try {/*@bgen(jjtree) #VariableDeclarator(> 1) */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        Variable();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 113:{
          jj_consume_token(113);
          Expression();
          break;
          }
        default:
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
      jjtn000.jjtSetLastToken(getToken(0));
    }
      }
    } finally {
      trace_return("VariableDeclarator");
    }
  }

  final public void InterfaceMembers() throws ParseException {
    trace_call("InterfaceMembers");
    try {/*@bgen(jjtree) InterfaceMembers */
  ASTInterfaceMembers jjtn000 = new ASTInterfaceMembers(JJTINTERFACEMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(109);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case FUNCTION:
          case PUBLIC:
          case ABSTRACT:
          case CONST:
          case DOLLAR:{
            ;
            break;
            }
          default:
            break label_15;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            jj_consume_token(PUBLIC);
            break;
            }
          default:
            ;
          }
          InterfaceMember();
          EndOfStatement();
        }
        jj_consume_token(110);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("InterfaceMembers");
    }
  }

  final public void InterfaceMember() throws ParseException {
    trace_call("InterfaceMember");
    try {/*@bgen(jjtree) InterfaceMember */
  ASTInterfaceMember jjtn000 = new ASTInterfaceMember(JJTINTERFACEMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:
        case ABSTRACT:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:{
            jj_consume_token(ABSTRACT);
            break;
            }
          default:
            ;
          }
          jj_consume_token(FUNCTION);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 112:{
            jj_consume_token(112);
            break;
            }
          default:
            ;
          }
          jj_consume_token(IDENTIFIER);
          jj_consume_token(105);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOLLAR:
          case IDENTIFIER:
          case 112:{
            ParameterList();
            break;
            }
          default:
            ;
          }
          jj_consume_token(106);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 109:{
            jj_consume_token(109);
            jj_consume_token(110);
            break;
            }
          default:
            ;
          }
          break;
          }
        case DOLLAR:{
          jj_consume_token(DOLLAR);
          jj_consume_token(VAR_NAME);
          label_16:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 107:{
              ;
              break;
              }
            default:
              break label_16;
            }
            jj_consume_token(107);
            jj_consume_token(DOLLAR);
            jj_consume_token(VAR_NAME);
          }
          break;
          }
        case CONST:{
          jj_consume_token(CONST);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(113);
          Expression();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("InterfaceMember");
    }
  }

  final public void IncludeStatement() throws ParseException {
    trace_call("IncludeStatement");
    try {/*@bgen(jjtree) IncludeStatement */
  ASTIncludeStatement jjtn000 = new ASTIncludeStatement(JJTINCLUDESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 114:{
          jj_consume_token(114);
          break;
          }
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCLUDE:{
          jj_consume_token(INCLUDE);
          break;
          }
        case INCLUDE_ONCE:{
          jj_consume_token(INCLUDE_ONCE);
          break;
          }
        case REQUIRE:{
          jj_consume_token(REQUIRE);
          break;
          }
        case REQUIRE_ONCE:{
          jj_consume_token(REQUIRE_ONCE);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_10(2)) {
          jj_consume_token(105);
          Expression();
          jj_consume_token(106);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case CLONE:
          case ARRAY:
          case NEW:
          case PREDEFINED_CONSTANT:
          case DOLLAR:
          case IDENTIFIER:
          case 105:
          case 112:
          case 114:
          case 142:
          case 147:
          case 148:
          case 149:
          case 150:{
            Expression();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        EndOfStatement();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("IncludeStatement");
    }
  }

  final public void EchoStatement() throws ParseException {
    trace_call("EchoStatement");
    try {/*@bgen(jjtree) EchoStatement */
  ASTEchoStatement jjtn000 = new ASTEchoStatement(JJTECHOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ECHO:{
          jj_consume_token(ECHO);
          break;
          }
        case PRINT:{
          jj_consume_token(PRINT);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        ArgumentExpressionList();
        EndOfStatement();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("EchoStatement");
    }
  }

  final public void Expression() throws ParseException {
    trace_call("Expression");
    try {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        LogicalTextOrExpression();
      } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn000);
             }
             jjtn000.jjtSetLastToken(getToken(0));
           }
      }
    } finally {
      trace_return("Expression");
    }
  }

  final public void LogicalTextOrExpression() throws ParseException {
    trace_call("LogicalTextOrExpression");
    try {/*@bgen(jjtree) #LogicalTextOrExpression(> 1) */
  ASTLogicalTextOrExpression jjtn000 = new ASTLogicalTextOrExpression(JJTLOGICALTEXTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        LogicalTextXorExpression();
        if (jj_2_11(2)) {
          jj_consume_token(OR);
          LogicalTextOrExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("LogicalTextOrExpression");
    }
  }

  final public void LogicalTextXorExpression() throws ParseException {
    trace_call("LogicalTextXorExpression");
    try {/*@bgen(jjtree) #LogicalTextXorExpression(> 1) */
  ASTLogicalTextXorExpression jjtn000 = new ASTLogicalTextXorExpression(JJTLOGICALTEXTXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        LogicalTextAndExpression();
        if (jj_2_12(2)) {
          jj_consume_token(XOR);
          LogicalTextXorExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("LogicalTextXorExpression");
    }
  }

  final public void LogicalTextAndExpression() throws ParseException {
    trace_call("LogicalTextAndExpression");
    try {/*@bgen(jjtree) #LogicalTextAndExpression(> 1) */
  ASTLogicalTextAndExpression jjtn000 = new ASTLogicalTextAndExpression(JJTLOGICALTEXTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        AssignmentExpression();
        if (jj_2_13(2)) {
          jj_consume_token(AND);
          LogicalTextAndExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("LogicalTextAndExpression");
    }
  }

  final public void AssignmentExpression() throws ParseException {
    trace_call("AssignmentExpression");
    try {/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        ConditionalExpression();
        if (jj_2_14(2)) {
          AssignmentOperator();
          Expression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("AssignmentExpression");
    }
  }

  final public void AssignmentOperator() throws ParseException {
    trace_call("AssignmentOperator");
    try {/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 113:{
          jj_consume_token(113);
          break;
          }
        case 115:{
          jj_consume_token(115);
          break;
          }
        case 116:{
          jj_consume_token(116);
          break;
          }
        case 117:{
          jj_consume_token(117);
          break;
          }
        case 118:{
          jj_consume_token(118);
          break;
          }
        case 119:{
          jj_consume_token(119);
          break;
          }
        case 120:{
          jj_consume_token(120);
          break;
          }
        case 121:{
          jj_consume_token(121);
          break;
          }
        case 122:{
          jj_consume_token(122);
          break;
          }
        case 123:{
          jj_consume_token(123);
          break;
          }
        case 124:{
          jj_consume_token(124);
          break;
          }
        case 125:{
          jj_consume_token(125);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("AssignmentOperator");
    }
  }

  final public void ConditionalExpression() throws ParseException {
    trace_call("ConditionalExpression");
    try {/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        Logical_Or_Expression();
        if (jj_2_15(2)) {
          jj_consume_token(126);
          Expression();
          jj_consume_token(108);
          Expression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ConditionalExpression");
    }
  }

  final public void Logical_Or_Expression() throws ParseException {
    trace_call("Logical_Or_Expression");
    try {/*@bgen(jjtree) #Logical_Or_Expression(> 1) */
  ASTLogical_Or_Expression jjtn000 = new ASTLogical_Or_Expression(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        Logical_And_Expression();
        if (jj_2_16(2)) {
          jj_consume_token(127);
          Logical_Or_Expression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Logical_Or_Expression");
    }
  }

  final public void Logical_And_Expression() throws ParseException {
    trace_call("Logical_And_Expression");
    try {/*@bgen(jjtree) #Logical_And_Expression(> 1) */
  ASTLogical_And_Expression jjtn000 = new ASTLogical_And_Expression(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        BitwiseOrExpression();
        if (jj_2_17(2)) {
          jj_consume_token(128);
          Logical_And_Expression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Logical_And_Expression");
    }
  }

  final public void BitwiseOrExpression() throws ParseException {
    trace_call("BitwiseOrExpression");
    try {/*@bgen(jjtree) #BitwiseOrExpression(> 1) */
  ASTBitwiseOrExpression jjtn000 = new ASTBitwiseOrExpression(JJTBITWISEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        BitwiseXorExpression();
        if (jj_2_18(2)) {
          jj_consume_token(129);
          BitwiseOrExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("BitwiseOrExpression");
    }
  }

  final public void BitwiseXorExpression() throws ParseException {
    trace_call("BitwiseXorExpression");
    try {/*@bgen(jjtree) #BitwiseXorExpression(> 1) */
  ASTBitwiseXorExpression jjtn000 = new ASTBitwiseXorExpression(JJTBITWISEXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        BitwiseAndExpression();
        if (jj_2_19(2)) {
          jj_consume_token(130);
          BitwiseXorExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("BitwiseXorExpression");
    }
  }

  final public void BitwiseAndExpression() throws ParseException {
    trace_call("BitwiseAndExpression");
    try {/*@bgen(jjtree) #BitwiseAndExpression(> 1) */
  ASTBitwiseAndExpression jjtn000 = new ASTBitwiseAndExpression(JJTBITWISEANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        EqualityExpression();
        if (jj_2_20(2)) {
          jj_consume_token(112);
          BitwiseAndExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("BitwiseAndExpression");
    }
  }

  final public void EqualityExpression() throws ParseException {
    trace_call("EqualityExpression");
    try {/*@bgen(jjtree) #EqualityExpression(> 1) */
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        RelationalExpression();
        if (jj_2_21(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 131:{
            jj_consume_token(131);
            break;
            }
          case 132:{
            jj_consume_token(132);
            break;
            }
          case 133:{
            jj_consume_token(133);
            break;
            }
          case 134:{
            jj_consume_token(134);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          EqualityExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("EqualityExpression");
    }
  }

  final public void RelationalExpression() throws ParseException {
    trace_call("RelationalExpression");
    try {/*@bgen(jjtree) #RelationalExpression(> 1) */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        ShiftExpression();
        if (jj_2_22(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 135:{
            jj_consume_token(135);
            break;
            }
          case 136:{
            jj_consume_token(136);
            break;
            }
          case 137:{
            jj_consume_token(137);
            break;
            }
          case 138:{
            jj_consume_token(138);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          RelationalExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("RelationalExpression");
    }
  }

  final public void ShiftExpression() throws ParseException {
    trace_call("ShiftExpression");
    try {/*@bgen(jjtree) #ShiftExpression(> 1) */
  ASTShiftExpression jjtn000 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        AdditiveExpression();
        if (jj_2_23(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 139:{
            jj_consume_token(139);
            break;
            }
          case 140:{
            jj_consume_token(140);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          ShiftExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ShiftExpression");
    }
  }

  final public void AdditiveExpression() throws ParseException {
    trace_call("AdditiveExpression");
    try {/*@bgen(jjtree) #AdditiveExpression(> 1) */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        MultiplicativeExpression();
        if (jj_2_24(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 141:{
            jj_consume_token(141);
            break;
            }
          case 142:{
            jj_consume_token(142);
            break;
            }
          case 143:{
            jj_consume_token(143);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          AdditiveExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("AdditiveExpression");
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    trace_call("MultiplicativeExpression");
    try {/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        CastExpression();
        if (jj_2_25(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 144:{
            jj_consume_token(144);
            break;
            }
          case 145:{
            jj_consume_token(145);
            break;
            }
          case 146:{
            jj_consume_token(146);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          MultiplicativeExpression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("MultiplicativeExpression");
    }
  }

  final public void CastExpression() throws ParseException {
    trace_call("CastExpression");
    try {/*@bgen(jjtree) #CastExpression(> 1) */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_26(2147483647)) {
          jj_consume_token(105);
          jj_consume_token(VARTYPE);
          jj_consume_token(106);
        } else {
          ;
        }
        UnaryExpression();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("CastExpression");
    }
  }

  final public void UnaryExpression() throws ParseException {
    trace_call("UnaryExpression");
    try {/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 112:
          case 142:
          case 147:
          case 148:{
            ;
            break;
            }
          default:
            break label_17;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 112:{
            jj_consume_token(112);
            break;
            }
          case 142:{
            jj_consume_token(142);
            break;
            }
          case 147:{
            jj_consume_token(147);
            break;
            }
          case 148:{
            jj_consume_token(148);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        PrefixIncDecExpression();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("UnaryExpression");
    }
  }

  final public void PrefixIncDecExpression() throws ParseException {
    trace_call("PrefixIncDecExpression");
    try {/*@bgen(jjtree) #PrefixIncDecExpression(> 1) */
  ASTPrefixIncDecExpression jjtn000 = new ASTPrefixIncDecExpression(JJTPREFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 149:
          case 150:{
            ;
            break;
            }
          default:
            break label_18;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 149:{
            jj_consume_token(149);
            break;
            }
          case 150:{
            jj_consume_token(150);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        PostfixIncDecExpression();
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("PrefixIncDecExpression");
    }
  }

  final public void PostfixIncDecExpression() throws ParseException {
    trace_call("PostfixIncDecExpression");
    try {/*@bgen(jjtree) #PostfixIncDecExpression(> 1) */
  ASTPostfixIncDecExpression jjtn000 = new ASTPostfixIncDecExpression(JJTPOSTFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        InstanceOfExpression();
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 149:
          case 150:{
            ;
            break;
            }
          default:
            break label_19;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 149:{
            jj_consume_token(149);
            break;
            }
          case 150:{
            jj_consume_token(150);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn000);
             }
             jjtn000.jjtSetLastToken(getToken(0));
           }
      }
    } finally {
      trace_return("PostfixIncDecExpression");
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    trace_call("InstanceOfExpression");
    try {/*@bgen(jjtree) #InstanceOfExpression(> 1) */
  ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        PostfixExpression();
        if (jj_2_27(2)) {
          jj_consume_token(INSTANCEOF);
          Expression();
        } else {
          ;
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("InstanceOfExpression");
    }
  }

  final public void PostfixExpression() throws ParseException {
    trace_call("PostfixExpression");
    try {/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        PrimaryExpression();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 105:
          case 109:
          case 151:
          case 152:
          case 153:{
            ;
            break;
            }
          default:
            break label_20;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 105:{
            jj_consume_token(105);
            ArgumentExpressionList();
            jj_consume_token(106);
            break;
            }
          case 151:{
            jj_consume_token(151);
            PostfixExpression();
            break;
            }
          case 152:{
            jj_consume_token(152);
            PostfixExpression();
            break;
            }
          case 153:{
            jj_consume_token(153);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case DOUBLE_STRING_LITERAL_START:
            case SINGLE_STRING_LITERAL_START:
            case HEREDOC_START:
            case CLONE:
            case ARRAY:
            case NEW:
            case PREDEFINED_CONSTANT:
            case DOLLAR:
            case IDENTIFIER:
            case 105:
            case 112:
            case 114:
            case 142:
            case 147:
            case 148:
            case 149:
            case 150:{
              Expression();
              break;
              }
            default:
              ;
            }
            jj_consume_token(154);
            break;
            }
          case 109:{
            jj_consume_token(109);
            Expression();
            jj_consume_token(110);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("PostfixExpression");
    }
  }

  final public void PrimaryExpression() throws ParseException {
    trace_call("PrimaryExpression");
    try {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_28(2)) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 114:{
            jj_consume_token(114);
            break;
            }
          default:
            ;
          }
          Variable();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case DOUBLE_STRING_LITERAL_START:
          case SINGLE_STRING_LITERAL_START:
          case HEREDOC_START:
          case PREDEFINED_CONSTANT:
          case IDENTIFIER:
          case 114:{
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 114:{
              jj_consume_token(114);
              break;
              }
            default:
              ;
            }
            Constant();
            break;
            }
          case 105:{
            jj_consume_token(105);
            Expression();
            jj_consume_token(106);
            break;
            }
          case CLONE:
          case NEW:{
            ClassInstantiation();
            break;
            }
          case ARRAY:{
            Array();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("PrimaryExpression");
    }
  }

  final public void Array() throws ParseException {
    trace_call("Array");
    try {/*@bgen(jjtree) Array */
  ASTArray jjtn000 = new ASTArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(ARRAY);
        jj_consume_token(105);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:{
          Expression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 111:{
            jj_consume_token(111);
            Expression();
            break;
            }
          default:
            ;
          }
          break;
          }
        default:
          ;
        }
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 107:{
            ;
            break;
            }
          default:
            break label_21;
          }
          jj_consume_token(107);
          Expression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 111:{
            jj_consume_token(111);
            Expression();
            break;
            }
          default:
            ;
          }
        }
        jj_consume_token(106);
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Array");
    }
  }

  final public void ClassInstantiation() throws ParseException {
    trace_call("ClassInstantiation");
    try {/*@bgen(jjtree) ClassInstantiation */
  ASTClassInstantiation jjtn000 = new ASTClassInstantiation(JJTCLASSINSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          Expression();
          if (jj_2_29(3)) {
            jj_consume_token(105);
            ArgumentExpressionList();
            jj_consume_token(106);
          } else {
            ;
          }
          break;
          }
        case CLONE:{
          jj_consume_token(CLONE);
          Variable();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ClassInstantiation");
    }
  }

  final public void Variable() throws ParseException {
    trace_call("Variable");
    try {/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(DOLLAR);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOLLAR1:{
            ;
            break;
            }
          default:
            break label_22;
          }
          jj_consume_token(DOLLAR1);
        }
        jj_consume_token(VAR_NAME);
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Variable");
    }
  }

  final public void ArgumentExpressionList() throws ParseException {
    trace_call("ArgumentExpressionList");
    try {/*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = new ASTArgumentExpressionList(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:
        case CLONE:
        case ARRAY:
        case NEW:
        case PREDEFINED_CONSTANT:
        case DOLLAR:
        case IDENTIFIER:
        case 105:
        case 112:
        case 114:
        case 142:
        case 147:
        case 148:
        case 149:
        case 150:{
          Expression();
          break;
          }
        default:
          ;
        }
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 107:{
            ;
            break;
            }
          default:
            break label_23;
          }
          jj_consume_token(107);
          Expression();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("ArgumentExpressionList");
    }
  }

  final public void Constant() throws ParseException {
    trace_call("Constant");
    try {/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER_LITERAL:{
          jj_consume_token(INTEGER_LITERAL);
          break;
          }
        case FLOATING_POINT_LITERAL:{
          jj_consume_token(FLOATING_POINT_LITERAL);
          break;
          }
        case DOUBLE_STRING_LITERAL_START:
        case SINGLE_STRING_LITERAL_START:
        case HEREDOC_START:{
          String();
          break;
          }
        case PREDEFINED_CONSTANT:{
          jj_consume_token(PREDEFINED_CONSTANT);
          break;
          }
        case IDENTIFIER:{
          jj_consume_token(IDENTIFIER);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Constant");
    }
  }

  final public void String() throws ParseException {
    trace_call("String");
    try {/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOUBLE_STRING_LITERAL_START:{
          DoubleStringLiteral();
          break;
          }
        case SINGLE_STRING_LITERAL_START:{
          jj_consume_token(SINGLE_STRING_LITERAL_START);
          jj_consume_token(SINGLE_STRING_LITERAL_END);
          break;
          }
        case HEREDOC_START:{
          jj_consume_token(HEREDOC_START);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("String");
    }
  }

  final public void DoubleStringLiteral() throws ParseException {
    trace_call("DoubleStringLiteral");
    try {/*@bgen(jjtree) DoubleStringLiteral */
  ASTDoubleStringLiteral jjtn000 = new ASTDoubleStringLiteral(JJTDOUBLESTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(DOUBLE_STRING_LITERAL_START);
        if (jj_2_30(2)) {
          jj_consume_token(DSL_SIMPLE_VAR_START);
          jj_consume_token(DSL_SIMPLE_STRING_VAR_END);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOUBLE_STRING_LITERAL_END:
          case DSL_SIMPLE_VAR_START:
          case DSL_COMPLEX_VAR_START:{
            label_24:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case DSL_SIMPLE_VAR_START:
              case DSL_COMPLEX_VAR_START:{
                ;
                break;
                }
              default:
                break label_24;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case DSL_SIMPLE_VAR_START:{
                jj_consume_token(DSL_SIMPLE_VAR_START);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DSL_SIMPLE_VAR_END:{
                  jj_consume_token(DSL_SIMPLE_VAR_END);
                  break;
                  }
                case DSL_SIMPLE_VAR_WASNT:{
                  jj_consume_token(DSL_SIMPLE_VAR_WASNT);
                  break;
                  }
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              case DSL_COMPLEX_VAR_START:{
                jj_consume_token(DSL_COMPLEX_VAR_START);
                jj_consume_token(DSL_COMPLEX_VAR_END);
                break;
                }
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            jj_consume_token(DOUBLE_STRING_LITERAL_END);
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("DoubleStringLiteral");
    }
  }

  final public void Visibility() throws ParseException {
    trace_call("Visibility");
    try {/*@bgen(jjtree) Visibility */
  ASTVisibility jjtn000 = new ASTVisibility(JJTVISIBILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          jj_consume_token(PUBLIC);
          break;
          }
        case PRIVATE:{
          jj_consume_token(PRIVATE);
          break;
          }
        case PROTECTED:{
          jj_consume_token(PROTECTED);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
      }
    } finally {
      trace_return("Visibility");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_33()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(108)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(PHP_END)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(TRY)) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(THROW)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(DSL_COMPLEX_VAR_START)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(DSL_SIMPLE_VAR_START)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_134()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOUBLE_STRING_LITERAL_END)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(DSL_SIMPLE_VAR_START)) return true;
    if (jj_scan_token(DSL_SIMPLE_STRING_VAR_END)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(107)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(DOUBLE_STRING_LITERAL_START)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(SINGLE_STRING_LITERAL_START)) return true;
    if (jj_scan_token(SINGLE_STRING_LITERAL_END)) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_scan_token(109)) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_scan_token(105)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(153)) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(152)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(151)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(DOLLAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(100)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(CLONE)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(105)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) return true;
    }
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(VARTYPE)) return true;
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(105)) return true;
    if (jj_scan_token(VARTYPE)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) return true;
    }
    }
    }
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    }
    }
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_scan_token(112)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_scan_token(130)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(129)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(128)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(127)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(105)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(126)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_39()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_3R_82()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(114)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(GLOBAL)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(107)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(112)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(109)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public PhpParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public PhpParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PhpParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PhpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public PhpParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PhpParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public PhpParser(PhpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(PhpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
