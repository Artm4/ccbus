/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. lang.jj */
/*@egen*//*

  PHP grammar defintion for use with JavaCC
  By Satyam (satyam@satyam.com.ar)

  This is a partial grammar which I meant to use in a project of mine.
  I refined it a little bit beyond my specific need, but didn't go to the very end.
  It works for the purpose of my project, but it is not complete.

  It was tested by parsing all the source files in the PHP 5.0 test suite,
  and a couple of other applications (a CMS and an image gallery).
  Some files in these sets were skipped because they use syntax not supported
  in this parser, as noted in the TODO lists below.


TODO:

- Alternate notation for control flow, if: endif, etc.
- Curly braces to disambiguate variable variable array references: ${$a[1]} against ${$a}[1]
- Notice comment on line 555
- There are a couple of warnings when compiling which I wasn't able to solve nor was I able
  to figure out if they mattered at all.
*/

options {
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;

  JAVA_UNICODE_ESCAPE = true;
    ERROR_REPORTING = false;
    STATIC = false;
    COMMON_TOKEN_ACTION = false;

                        
                 
                           
}


PARSER_BEGIN(PhpParser)

package ccbus.tool.parser.php;
import java.util.*;

public  class PhpParser/*@bgen(jjtree)*/implements PhpParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTPhpParserState jjtree = new JJTPhpParserState();

/*@egen*/
	private static PhpParser parser ;

	public static void main ( String args [ ] ) {

		if(args.length == 0){
			System.out.println("PHP Parser Version 0.1Alpha:  Reading from standard input . . .");
			parser = new PhpParser(System.in);
		} else if (args.length == 1) {
			System.out.println("PHP Parser Version 0.1Alpha:  Reading from file " + args[0] + " . . ." );
			try {
				parser = new PhpParser(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e){
				System.out.println("PHP Parser Version 0.1:  File " + args[0] + " not found.");
				return ;
			}
		} else {
			System.out.println("PHP Parser Version 0.1Alpha:  Usage is one of:");
			System.out.println("         java PHP < inputfile");
			System.out.println("OR");
			System.out.println("         java PHP inputfile");
			return ;
		}
		parser.token_source.SwitchTo(HTML_STATE);
		try {
			parser.PhpPage();
			System.out.println("PHP Parser Version 0.1Alpha:  PHP program parsed successfully.");
		}
		catch(ParseException e) {
			System.out.println("PHP Parser Version 0.1Alpha:  Encountered errors during parse.");
			System.out.println(e.getMessage());
		}
	}

	void jjtreeOpenNodeScope(Node n)
    {
        n.getId();
    }

    void jjtreeCloseNodeScope(Node n)
    {
        n.getId();
    }
}

PARSER_END(PhpParser)

TOKEN_MGR_DECLS : {
	static String HereDocEnd;
}

<HTML_STATE> TOKEN [IGNORE_CASE]: {
	<PHP_BEGIN: "<?" ("php")?> : DEFAULT  |
	<PHP_EXPR: "<?=" > : DEFAULT |
	<HTML_OTHER: "<" ~[] >
}

<HTML_STATE> TOKEN : {
	<HTML: (~["<"] | "<" ~["?"])+ >
}

<DEFAULT> SKIP :
{	" "
|	"\t"
|	"\n"
|	"\r"
|	<SLASH_SLASH_COMMENT: "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|	<NUMERAL_COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|	<SLASH_STAR_COMMENT: "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

<DEFAULT> TOKEN :
{	<INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])? | <HEX_LITERAL> (["l","L"])? | <OCTAL_LITERAL> (["l","L"])?>
|  		<#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
|  		<#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+>
|  		<#OCTAL_LITERAL: "0" (["0"-"7"])*>
|  	<FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|  		<#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
|  	<DOUBLE_STRING_LITERAL_START: "\""> : DOUBLE_STRING_LITERAL
|  	<SINGLE_STRING_LITERAL_START: "'">  : SINGLE_STRING_LITERAL
| 	<HEREDOC_START: "<<<"> : HEREDOC1
}

<SINGLE_STRING_LITERAL> MORE: {
	<"\\">: SSL_SPECIAL
}

<SINGLE_STRING_LITERAL> TOKEN: {
	<SINGLE_STRING_LITERAL_END: "'">: DEFAULT
}

<SINGLE_STRING_LITERAL> MORE:
{	<(~[])>
}

<SSL_SPECIAL> MORE:
{	<["'" , "\\"] > : SINGLE_STRING_LITERAL
|	< ~[]> : SINGLE_STRING_LITERAL
}

<DOUBLE_STRING_LITERAL> TOKEN: {
	<DOUBLE_STRING_LITERAL_END: "\""> : DEFAULT
}

<DOUBLE_STRING_LITERAL> TOKEN:
{	<DSL_SIMPLE_VAR_START: "$"> :DSL_SIMPLE_VAR
|	<DSL_COMPLEX_VAR_START: ("{$" | "${") > :DSL_COMPLEX_VAR
}

<DOUBLE_STRING_LITERAL> MORE: {
	<"\\"> : DSL_SPECIAL
}

<DOUBLE_STRING_LITERAL> MORE: {
	<TEXT: (~[])>
}

<DSL_COMPLEX_VAR> TOKEN: {
	<DSL_COMPLEX_VAR_END: "}"> :DOUBLE_STRING_LITERAL
}

<DSL_COMPLEX_VAR> MORE: {
	<DSL_CV_TEXT: (~[])>
}

<DSL_SIMPLE_VAR> TOKEN:
{	<DSL_SIMPLE_VAR_END: <IDENTIFIER> ("[" <IDENTIFIER> "]") ? > :DOUBLE_STRING_LITERAL
}

<DSL_SIMPLE_VAR> TOKEN:
{	<DSL_SIMPLE_STRING_VAR_END: "\""> :DEFAULT
}

<DSL_SIMPLE_VAR> TOKEN:
{ 	<DSL_SIMPLE_VAR_WASNT: ~[]> :DOUBLE_STRING_LITERAL
}

<DSL_SPECIAL> MORE: {
	<["n","t","b","r","f","\\","\"","$","{"]> :DOUBLE_STRING_LITERAL  |
	<(["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])> :DOUBLE_STRING_LITERAL |
	<("x" | "X") ["0"-"9","A"-"F","a"-"f"](["0"-"9","A"-"F","a"-"f"])?> :DOUBLE_STRING_LITERAL |
	< ~[]>:DOUBLE_STRING_LITERAL
}


<HEREDOC1> SKIP: {
	<HD1: <IDENTIFIER>> {
		HereDocEnd = image.toString();
	} :HEREDOC
}
<HEREDOC> SKIP: {
	<~["\n"]> |
	<"\n"> :HEREDOC2
}

<HEREDOC, HEREDOC2> SKIP: {
	< "\r" | " " >
}

<HEREDOC2> SKIP: {
	<"\n"> |
	<HD2: <IDENTIFIER>>
	 {
		SwitchTo( HereDocEnd.equals(image.toString()) ? DEFAULT : HEREDOC ) ;
	} |
	<~[] > :HEREDOC
}

<DEFAULT> TOKEN : {
	<REQUIRE_ONCE: "require_once"> |
	<REQUIRE: "require"> |
	<INCLUDE_ONCE: "include_once"> |
	<INCLUDE: "include"> |

	<DEFINE: "define"> |

	<ECHO: "echo"> |
	<PRINT: "print"> |

	<SWITCH: "switch"> |
	<CASE: "case"> |
	<DFLT: "default"> |
	<BREAK: "break"> |

	<RETURN: "return"> |

	<DO: "do"> |

	<WHILE: "while"> |

	<FOREACH: "foreach"> |
	<AS: "as"> |

	<FOR: "for"> |
	<CONTINUE: "continue"> |

	<IF: "if"> |
	<ELSE: "else"> |
	<ELSEIF: "elseif"> |
	<AND: "and"> |
	<OR: "or"> |
	<XOR: "xor"> |
	<NOT: "not"> |

	<FUNCTION: "function"> |

	<CLASS: "class"> |
	<EXTENDS: "extends" > |
	<VAR: "var"> |
	<PUBLIC: "public"> |
	<PRIVATE: "private"> |
	<PROTECTED: "protected"> |
	<ABSTRACT: "abstract"> |
	<FINAL: "final" > |
	<STATIC: "static" > |
	<INTERFACE: "interface"> |
	<IMPLEMENTS: "implements"> |
	<CONST: "const" > |
	<CLONE: "clone" > |
	<INSTANCEOF: "instanceof" > |

	<GLOBAL: "global"> |

	<ARRAY: "array"> |

	<NEW: "new" > |

	<PREDEFINED_CONSTANT: "null" | "true" | "false" > |

	<PHP_END: "?>"  > : HTML_STATE |
	<DOLLAR: "$" > :VAR_NAME_STATE |
	<SEMICOLON: ";">
| 	<TRY: "try">
|	<CATCH: "catch">
|	<THROW: "throw">
}

<VAR_NAME_STATE> TOKEN :
{	<VAR_NAME: <LETTER1> (<LETTER1> | <DIGIT1>)*> : DEFAULT
|  		<#LETTER1: ["A"-"Z","_","a"-"z"]>
|  		<#DIGIT1: ["0"-"9"]>
|	<DOLLAR1: "$">
}

<DEFAULT> TOKEN: {
	<VARTYPE: ("boolean" | "bool" | "integer" | "int" | "float" | "double" | "real" | "string" )>
}


<DEFAULT> TOKEN : {
 	<IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
|  		<#LETTER: ["A"-"Z","_","a"-"z"]>
|  		<#DIGIT: ["0"-"9"]>
}

void PhpPage() : {/*@bgen(jjtree) PhpPage */
  ASTPhpPage jjtn000 = new ASTPhpPage(JJTPHPPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PhpPage */
        try {
/*@egen*/
	(HtmlBlock())*
	(
		<PHP_BEGIN> (Statement())*
	| 	<EOF>
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void HtmlBlock() : {/*@bgen(jjtree) HtmlBlock */
  ASTHtmlBlock jjtn000 = new ASTHtmlBlock(JJTHTMLBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) HtmlBlock */
        try {
/*@egen*/	<HTML>
|	<HTML_OTHER>
|	<PHP_EXPR> Expression() <PHP_END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	LOOKAHEAD(2) LabeledStatement() |
	LOOKAHEAD(2) ClassDeclaration() |
	LOOKAHEAD(2) InterfaceDeclaration() |
	LOOKAHEAD(2) ExpressionStatement() |
	CompoundStatement() |
	SelectionStatement() |
	IterationStatement() |
	JumpStatement() |
	IncludeStatement() |
	EchoStatement() |
	DefineStatement() |
	MemberDeclaration()
|	ThrowStatement()
| 	TryBlock()
|	EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void  ThrowStatement() : {/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
        try {
/*@egen*/
	<THROW> ClassInstantiation() EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void TryBlock() : {/*@bgen(jjtree) TryBlock */
  ASTTryBlock jjtn000 = new ASTTryBlock(JJTTRYBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) TryBlock */
        try {
/*@egen*/
	<TRY> CompoundStatement() (<CATCH> "(" <IDENTIFIER> Variable() ")" CompoundStatement())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EndOfStatement() : {/*@bgen(jjtree) EndOfStatement */
  ASTEndOfStatement jjtn000 = new ASTEndOfStatement(JJTENDOFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EndOfStatement */
        try {
/*@egen*/
	";" | EmbeddedHtml()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EmbeddedHtml() : {/*@bgen(jjtree) EmbeddedHtml */
  ASTEmbeddedHtml jjtn000 = new ASTEmbeddedHtml(JJTEMBEDDEDHTML);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EmbeddedHtml */
        try {
/*@egen*/	<PHP_END>  ( <HTML>  | <HTML_OTHER> )*
	(
		<PHP_BEGIN>
	|	<EOF>
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void DefineStatement() : {/*@bgen(jjtree) DefineStatement */
  ASTDefineStatement jjtn000 = new ASTDefineStatement(JJTDEFINESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DefineStatement */
        try {
/*@egen*/
	<DEFINE> "(" String() "," Expression() ")" EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void LabeledStatement() : {/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = new ASTLabeledStatement(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LabeledStatement */
        try {
/*@egen*/
	<CASE> Expression() ":" Statement() |
	<DFLT> ":" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ExpressionStatement() : {/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ExpressionStatement */
        try {
/*@egen*/
	Expression() EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CompoundStatement() : {/*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = new ASTCompoundStatement(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) CompoundStatement */
        try {
/*@egen*/
	"{"
	    ( Statement())*
	"}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void SelectionStatement() : {/*@bgen(jjtree) SelectionStatement */
  ASTSelectionStatement jjtn000 = new ASTSelectionStatement(JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SelectionStatement */
        try {
/*@egen*/
	<IF> "(" Expression() ")" Statement() ( LOOKAHEAD(2) <ELSEIF> "(" Expression() ")" Statement() )* [ LOOKAHEAD(2) <ELSE> Statement() ] |
	<SWITCH> "(" Expression() ")" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void IterationStatement() : {/*@bgen(jjtree) IterationStatement */
  ASTIterationStatement jjtn000 = new ASTIterationStatement(JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IterationStatement */
        try {
/*@egen*/
	<WHILE> "(" Expression() ")" Statement() |
	<DO> Statement() <WHILE> "(" Expression() ")" EndOfStatement() |
	<FOR> "(" [ Expression() ] ";" [ Expression() ] ";" [ Expression() ] ")" Statement() |
	<FOREACH> "(" [Expression() ] <AS> Variable() ( "=>" ["&"] Variable())? ")" Statement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void JumpStatement() : {/*@bgen(jjtree) JumpStatement */
  ASTJumpStatement jjtn000 = new ASTJumpStatement(JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) JumpStatement */
        try {
/*@egen*/
	<CONTINUE> [<INTEGER_LITERAL>] EndOfStatement() |
	<BREAK> [<INTEGER_LITERAL>] EndOfStatement() |
	<RETURN> [ Expression() ] EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void ParameterList() : {/*@bgen(jjtree) ParameterList */
  ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParameterList */
        try {
/*@egen*/
	Parameter() (LOOKAHEAD(2) "," Parameter())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Parameter() : {/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	[<IDENTIFIER> ] ["&"] Variable() ( "=" Expression())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	[<ABSTRACT> | <FINAL> ] <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] [<IMPLEMENTS> <IDENTIFIER> ( "," <IDENTIFIER>) * ] ClassMembers()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassMembers() : {/*@bgen(jjtree) ClassMembers */
  ASTClassMembers jjtn000 = new ASTClassMembers(JJTCLASSMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassMembers */
        try {
/*@egen*/
	"{" (MemberDeclaration() )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void MemberDeclaration() : {/*@bgen(jjtree) MemberDeclaration */
  ASTMemberDeclaration jjtn000 = new ASTMemberDeclaration(JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MemberDeclaration */
        try {
/*@egen*/
	LOOKAHEAD( (<FINAL> | Visibility() | <STATIC> )* <FUNCTION>) (<FINAL> | Visibility() | <STATIC> )* <FUNCTION> ["&"]  <IDENTIFIER> "(" [ParameterList()] ")" CompoundStatement() |
	LOOKAHEAD([Visibility()] <CONST>) [Visibility()] <CONST> <IDENTIFIER> "=" Expression()  EndOfStatement() |
	(<VAR> | Visibility() | <STATIC> )* VariableDeclarator() ("," VariableDeclarator())* EndOfStatement() |
	<GLOBAL> Variable() ("," Variable())* EndOfStatement() |
	<ABSTRACT> [Visibility()] [<STATIC>] <FUNCTION> ["&"] <IDENTIFIER> "(" [ParameterList()] ")" EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/

}

void InterfaceDeclaration() : {/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceDeclaration */
        try {
/*@egen*/
	<INTERFACE> <IDENTIFIER> [<EXTENDS> <IDENTIFIER> ("," <IDENTIFIER> )* ] InterfaceMembers()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void VariableDeclarator()                         :
{/*@bgen(jjtree) #VariableDeclarator(> 1) */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #VariableDeclarator(> 1) */
  try {
/*@egen*/
  Variable() [ "=" Expression() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      if (jjtree.nodeCreated()) {
       jjtreeCloseNodeScope(jjtn000);
      }
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void InterfaceMembers() : {/*@bgen(jjtree) InterfaceMembers */
  ASTInterfaceMembers jjtn000 = new ASTInterfaceMembers(JJTINTERFACEMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceMembers */
        try {
/*@egen*/
	"{" ( [<PUBLIC>] InterfaceMember() EndOfStatement() )* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void InterfaceMember() : {/*@bgen(jjtree) InterfaceMember */
  ASTInterfaceMember jjtn000 = new ASTInterfaceMember(JJTINTERFACEMEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) InterfaceMember */
        try {
/*@egen*/
	[<ABSTRACT>] <FUNCTION> ["&"]  <IDENTIFIER> "(" [ParameterList()] ")" ["{" "}" ]|
	<DOLLAR> <VAR_NAME> ("," <DOLLAR> <VAR_NAME>)* |
	<CONST> <IDENTIFIER> "=" Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void IncludeStatement() : {/*@bgen(jjtree) IncludeStatement */
  ASTIncludeStatement jjtn000 = new ASTIncludeStatement(JJTINCLUDESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IncludeStatement */
        try {
/*@egen*/
	["@"] ( <INCLUDE> | <INCLUDE_ONCE> | <REQUIRE> | <REQUIRE_ONCE>) (LOOKAHEAD(2) "(" Expression() ")" | Expression() ) EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EchoStatement() : {/*@bgen(jjtree) EchoStatement */
  ASTEchoStatement jjtn000 = new ASTEchoStatement(JJTECHOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) EchoStatement */
        try {
/*@egen*/
	(<ECHO> | <PRINT> ) ArgumentExpressionList() EndOfStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
         try {
/*@egen*/
	 LogicalTextOrExpression()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn000);
             }
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
}

void LogicalTextOrExpression()                              :{/*@bgen(jjtree) #LogicalTextOrExpression(> 1) */
  ASTLogicalTextOrExpression jjtn000 = new ASTLogicalTextOrExpression(JJTLOGICALTEXTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #LogicalTextOrExpression(> 1) */
        try {
/*@egen*/
	LogicalTextXorExpression() [LOOKAHEAD(2) <OR> LogicalTextOrExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void LogicalTextXorExpression()                               : {/*@bgen(jjtree) #LogicalTextXorExpression(> 1) */
  ASTLogicalTextXorExpression jjtn000 = new ASTLogicalTextXorExpression(JJTLOGICALTEXTXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #LogicalTextXorExpression(> 1) */
        try {
/*@egen*/
	LogicalTextAndExpression() [LOOKAHEAD(2) <XOR> LogicalTextXorExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void LogicalTextAndExpression()                               : {/*@bgen(jjtree) #LogicalTextAndExpression(> 1) */
  ASTLogicalTextAndExpression jjtn000 = new ASTLogicalTextAndExpression(JJTLOGICALTEXTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #LogicalTextAndExpression(> 1) */
        try {
/*@egen*/
	AssignmentExpression() [LOOKAHEAD(2) <AND> LogicalTextAndExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AssignmentExpression()                           : {/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #AssignmentExpression(> 1) */
        try {
/*@egen*/
	ConditionalExpression() [LOOKAHEAD(2) AssignmentOperator() Expression()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AssignmentOperator() : {/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) AssignmentOperator */
        try {
/*@egen*/
	( "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ConditionalExpression()                            : {/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #ConditionalExpression(> 1) */
        try {
/*@egen*/
	Logical_Or_Expression() [LOOKAHEAD(2) "?" Expression() ":" Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void Logical_Or_Expression()                            : {/*@bgen(jjtree) #Logical_Or_Expression(> 1) */
  ASTLogical_Or_Expression jjtn000 = new ASTLogical_Or_Expression(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #Logical_Or_Expression(> 1) */
        try {
/*@egen*/
	Logical_And_Expression() [LOOKAHEAD(2) "||" Logical_Or_Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Logical_And_Expression()                             : {/*@bgen(jjtree) #Logical_And_Expression(> 1) */
  ASTLogical_And_Expression jjtn000 = new ASTLogical_And_Expression(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #Logical_And_Expression(> 1) */
        try {
/*@egen*/
	BitwiseOrExpression() [LOOKAHEAD(2) "&&" Logical_And_Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BitwiseOrExpression()                          : {/*@bgen(jjtree) #BitwiseOrExpression(> 1) */
  ASTBitwiseOrExpression jjtn000 = new ASTBitwiseOrExpression(JJTBITWISEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #BitwiseOrExpression(> 1) */
        try {
/*@egen*/
	BitwiseXorExpression() [LOOKAHEAD(2) "|" BitwiseOrExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BitwiseXorExpression()                           : {/*@bgen(jjtree) #BitwiseXorExpression(> 1) */
  ASTBitwiseXorExpression jjtn000 = new ASTBitwiseXorExpression(JJTBITWISEXOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #BitwiseXorExpression(> 1) */
        try {
/*@egen*/
	BitwiseAndExpression() [LOOKAHEAD(2) "^" BitwiseXorExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void BitwiseAndExpression()                           : {/*@bgen(jjtree) #BitwiseAndExpression(> 1) */
  ASTBitwiseAndExpression jjtn000 = new ASTBitwiseAndExpression(JJTBITWISEANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #BitwiseAndExpression(> 1) */
        try {
/*@egen*/
	EqualityExpression() [LOOKAHEAD(2) "&" BitwiseAndExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void EqualityExpression()                         : {/*@bgen(jjtree) #EqualityExpression(> 1) */
  ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #EqualityExpression(> 1) */
        try {
/*@egen*/
	RelationalExpression() [LOOKAHEAD(2) ( "==" | "!=" | "===" | "!==" ) EqualityExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void RelationalExpression()                           : {/*@bgen(jjtree) #RelationalExpression(> 1) */
  ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #RelationalExpression(> 1) */
        try {
/*@egen*/
	ShiftExpression() [LOOKAHEAD(2) ( "<" | ">" | "<=" | ">=" ) RelationalExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ShiftExpression()                      : {/*@bgen(jjtree) #ShiftExpression(> 1) */
  ASTShiftExpression jjtn000 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #ShiftExpression(> 1) */
        try {
/*@egen*/
	AdditiveExpression() [LOOKAHEAD(2) ( "<<" | ">>" ) ShiftExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void AdditiveExpression()                         : {/*@bgen(jjtree) #AdditiveExpression(> 1) */
  ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
        try {
/*@egen*/
	MultiplicativeExpression() [LOOKAHEAD(2) ( "+" | "-" | "." ) AdditiveExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void MultiplicativeExpression()                               : {/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
  ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
        try {
/*@egen*/
	CastExpression() [LOOKAHEAD(2) ( "*" | "/" | "%" ) MultiplicativeExpression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void CastExpression()                     : {/*@bgen(jjtree) #CastExpression(> 1) */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #CastExpression(> 1) */
        try {
/*@egen*/
	[ LOOKAHEAD("(" <VARTYPE> ")") "(" <VARTYPE> ")" ] UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void UnaryExpression()                      : {/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #UnaryExpression(> 1) */
        try {
/*@egen*/
	("&" | "-" | "~" | "!")* PrefixIncDecExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void PrefixIncDecExpression()                             : {/*@bgen(jjtree) #PrefixIncDecExpression(> 1) */
  ASTPrefixIncDecExpression jjtn000 = new ASTPrefixIncDecExpression(JJTPREFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #PrefixIncDecExpression(> 1) */
        try {
/*@egen*/
	("++" | "--" )* PostfixIncDecExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void PostfixIncDecExpression()                              : {/*@bgen(jjtree) #PostfixIncDecExpression(> 1) */
  ASTPostfixIncDecExpression jjtn000 = new ASTPostfixIncDecExpression(JJTPOSTFIXINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #PostfixIncDecExpression(> 1) */
         try {
/*@egen*/
	 InstanceOfExpression() ("++" | "--" )*/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
             if (jjtree.nodeCreated()) {
              jjtreeCloseNodeScope(jjtn000);
             }
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
}

void InstanceOfExpression()                           : {/*@bgen(jjtree) #InstanceOfExpression(> 1) */
  ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #InstanceOfExpression(> 1) */
        try {
/*@egen*/
	PostfixExpression() [LOOKAHEAD(2) <INSTANCEOF> Expression() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void PostfixExpression()                        : {/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #PostfixExpression(> 1) */
        try {
/*@egen*/
	PrimaryExpression() ( "("  ArgumentExpressionList() ")" |
						  "->" PostfixExpression() | /* TODO: There is a problem here.  Variable members
						  								can have reserved names since they are preceded
						  								by a $, but the $ is ommitted here and this
						  								parser will complain.  If you have declared:
						  									private $array
						  								you can have:
														  	$this->array
														which is fine with PHP,
														but will generate an error in this parser */

						  "::" PostfixExpression() |
						  "[" [ Expression()] "]" |
						  "{" Expression() "}"
						 )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void PrimaryExpression() : {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpression */
        try {
/*@egen*/

	LOOKAHEAD(2) ["@"]  Variable() |
	["@"] Constant() |
	"(" Expression() ")" |
	ClassInstantiation() |
	Array()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Array() : {/*@bgen(jjtree) Array */
  ASTArray jjtn000 = new ASTArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Array */
        try {
/*@egen*/
	<ARRAY> "(" [Expression() ["=>" Expression() ]] ( "," Expression() ["=>" Expression()] )* ")"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void ClassInstantiation() : {/*@bgen(jjtree) ClassInstantiation */
  ASTClassInstantiation jjtn000 = new ASTClassInstantiation(JJTCLASSINSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ClassInstantiation */
        try {
/*@egen*/
	<NEW>  Expression() [LOOKAHEAD(3) "(" ArgumentExpressionList() ")"] |
	<CLONE> Variable()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void Variable() : {/*@bgen(jjtree) Variable */
  ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Variable */
        try {
/*@egen*/
	<DOLLAR> (<DOLLAR1>)* <VAR_NAME>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


void ArgumentExpressionList() : {/*@bgen(jjtree) ArgumentExpressionList */
  ASTArgumentExpressionList jjtn000 = new ASTArgumentExpressionList(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ArgumentExpressionList */
        try {
/*@egen*/
	[Expression()] ( "," Expression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Constant() : {/*@bgen(jjtree) Constant */
  ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Constant */
        try {
/*@egen*/
	<INTEGER_LITERAL> | <FLOATING_POINT_LITERAL> | String() | <PREDEFINED_CONSTANT> | <IDENTIFIER>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void String() : {/*@bgen(jjtree) String */
  ASTString jjtn000 = new ASTString(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) String */
        try {
/*@egen*/
	DoubleStringLiteral() |
	<SINGLE_STRING_LITERAL_START> <SINGLE_STRING_LITERAL_END>|
	<HEREDOC_START>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void DoubleStringLiteral() : {/*@bgen(jjtree) DoubleStringLiteral */
  ASTDoubleStringLiteral jjtn000 = new ASTDoubleStringLiteral(JJTDOUBLESTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) DoubleStringLiteral */
        try {
/*@egen*/
	<DOUBLE_STRING_LITERAL_START>
	(
		LOOKAHEAD(2) <DSL_SIMPLE_VAR_START> <DSL_SIMPLE_STRING_VAR_END>
	|	(
			<DSL_SIMPLE_VAR_START>
		 	(
				<DSL_SIMPLE_VAR_END>
	|			<DSL_SIMPLE_VAR_WASNT>
			)
	|		<DSL_COMPLEX_VAR_START> <DSL_COMPLEX_VAR_END>
		)* <DOUBLE_STRING_LITERAL_END>
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Visibility() : {/*@bgen(jjtree) Visibility */
  ASTVisibility jjtn000 = new ASTVisibility(JJTVISIBILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Visibility */
        try {
/*@egen*/
	<PUBLIC> | <PRIVATE> | <PROTECTED>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            if (jjtree.nodeCreated()) {
             jjtreeCloseNodeScope(jjtn000);
            }
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}