/* Generated By:JJTree&JavaCC: Do not edit this line. ReactParserConstants.java */
package ccbus.tool.parser.react;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ReactParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int RENDER = 6;
  /** RegularExpression Id. */
  int FUNCTION = 7;
  /** RegularExpression Id. */
  int IMPORT = 8;
  /** RegularExpression Id. */
  int FROM = 9;
  /** RegularExpression Id. */
  int AS = 10;
  /** RegularExpression Id. */
  int IDENTIFIER = 11;
  /** RegularExpression Id. */
  int LETTER = 12;
  /** RegularExpression Id. */
  int PART_LETTER = 13;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 16;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 17;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 18;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 20;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 21;
  /** RegularExpression Id. */
  int HEX_LITERAL = 22;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 23;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 24;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 25;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 26;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 27;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 28;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 29;
  /** RegularExpression Id. */
  int STRING_LITERAL = 30;
  /** RegularExpression Id. */
  int LPAREN = 31;
  /** RegularExpression Id. */
  int RPAREN = 32;
  /** RegularExpression Id. */
  int LBRACE = 33;
  /** RegularExpression Id. */
  int RBRACE = 34;
  /** RegularExpression Id. */
  int LBRACKET = 35;
  /** RegularExpression Id. */
  int RBRACKET = 36;
  /** RegularExpression Id. */
  int SEMICOLON = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int DOT = 39;
  /** RegularExpression Id. */
  int AT = 40;
  /** RegularExpression Id. */
  int STUFF_TO_IGNORE = 42;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<RENDER>",
    "\"function\"",
    "\"import\"",
    "\"from\"",
    "\"as\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<token of kind 14>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 19>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"\\u001a\"",
    "<STUFF_TO_IGNORE>",
  };

}
