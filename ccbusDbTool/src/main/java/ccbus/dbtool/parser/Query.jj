/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = true;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Query)
package connect.parser;
import connect.frontend.Util;
import connect.intermediate.*;
import connect.intermediate.icodeimpl.*;
import java.util.ArrayDeque;

/** Simple brace matcher. */
public class Query implements Parser{
    private Util util;
    private ICode programCode;

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Query parser = new Query(System.in);
    parser.init();
    parser.input();
  }

  public void init()
  {
     util=new Util(this);
     programCode=ICodeFactory.createICode();
  }

  public ICode getProgramCode()
  {
    return programCode;
  }

  public Token currentToken()
  {
      return this.token;
  }

}



PARSER_END(Query)

/** Root production. */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  < SELECT: "select" >
  |
  < FROM: "from">
  |
  < JOIN: "join">
  |
  < SEMICOLON : ";">
  |
  < DOT : ".">
  |
  < COMMA : ",">
  |
  < AS : "as">
  |
  < IDENTIFIER: ["a"-"z","A"-"Z","-","_"] ( ["a"-"z","A"-"Z","0"-"9","-","_"] )* >
  |
  < UNEXPECTED: ~[]>
}

void input():{}
{
  queryDeclaration()
  <EOF>
}

void queryDeclaration():
{
    ICodeNodeQuery nodeQuery=ICodeFactory.createICodeNodeQuery();
    ICodeNodeList fieldList=ICodeFactory.createICodeNodeFieldList();
    programCode.setRoot(nodeQuery);
    ICodeNodeTable nodeTable;
}
{
    (<SELECT>)?
    <FROM> identifier()
    {
        nodeTable=ICodeFactory.createICodeNodeTable();
        nodeTable.setTableName(util.currentToken().image);
        nodeQuery.setFrom(nodeTable);
    }
    (fieldList=fieldList()
    {
        nodeTable.setFieldList(fieldList);
    })?
    (
    <JOIN> identifier()
    {
        nodeTable=ICodeFactory.createICodeNodeTable();
        nodeTable.setTableName(util.currentToken().image);
    }
    (fieldList=fieldList()
    {
        nodeTable.setFieldList(fieldList);
        nodeQuery.addJoin(nodeTable);
    }
    )?
    )*
}

void identifier():{}
{
    (
        <IDENTIFIER>
    )
}

ICodeNodeList fieldList():
{
    ICodeNodeList nodeList=ICodeFactory.createICodeNodeFieldList();
    ICodeNodeKeyValue nodeKeyValue;
}
{
    (
        nodeKeyValue=field()
        {
            nodeList.addChild(nodeKeyValue);
        }
        (
        LOOKAHEAD(2) <COMMA>
        nodeKeyValue=field()
        {
            nodeList.addChild(nodeKeyValue);
        }
        )*
    )
    {
        return nodeList;
    }
}

ICodeNodeKeyValue field():
{
    ICodeNodeKeyValue nodeKeyValue=ICodeFactory.createICodeNodeKeyValue();
    Token identifier;
}
{
    (
        identifier()
        {
            identifier=util.currentToken();
            nodeKeyValue.setValue(identifier.image);
            nodeKeyValue.setKey(identifier.image);
        }
        (
            LOOKAHEAD(2)
            <AS> identifier()
            {
                 identifier=util.currentToken();
                 nodeKeyValue.setKey(identifier.image);
            }
        )?
    )
    {
        return nodeKeyValue;
    }
}

void name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  identifier()
  ( LOOKAHEAD(2) <DOT> identifier()
  )*
}