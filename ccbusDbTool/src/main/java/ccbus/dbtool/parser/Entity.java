/* Entity.java */
/* Generated By:JavaCC: Do not edit this line. Entity.java */
package ccbus.dbtool.parser;
import ccbus.dbtool.frontend.Util;
import ccbus.dbtool.intermediate.*;
import ccbus.dbtool.intermediate.icodeimpl.*;

import java.util.*;

/** Simple brace matcher. */
public class Entity implements Parser, EntityConstants {
    private Util util;
    private ICode programCode;
    private ICodeNodeClass currentCodeNodeClass;
    private ICodeNodeNotationList currentCodeNodeNotationList=null;
    private Stack<ICodeNodeClass> classStack= new Stack<ICodeNodeClass>();
    private ITCodeNodeList<ICodeNodeImport> importList=ICodeFactory.createITCodeNodeImportList();
    private HashMap<String,String> innerTypes=new HashMap();
    String packageName="";

    private static final Collection<String> relation=
                Arrays.asList("ManyToMany",
                        "ManyToOne",
                        "OneToMany",
                        "OneToOne"
                );

    public static boolean isRelation(String name)
    {
        return relation.contains(name);
    }

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Entity parser = new Entity(System.in);
    parser.init();
    parser.input();
  }

  public void init()
  {
     util=new Util(this);
     programCode=ICodeFactory.createICode();
  }

  public ICode getProgramCode()
  {
    return programCode;
  }

  public Token currentToken()
  {
        return this.token;
  }

  final public void input__() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:
      case FIELD_ACCESS:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      methodDeclaration();
    }
    jj_consume_token(0);
  }

  final public void input() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:
      case FIELD_ACCESS:
      case CLASS_IDENTIFIER:
      case IMPORT:
      case PACKAGE:
      case AT:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      decl();
    }
    jj_consume_token(0);
  }

  final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPORT:
    case PACKAGE:{
      headerDecl();
      break;
      }
    case STATIC:
    case FIELD_ACCESS:
    case CLASS_IDENTIFIER:{
      classDecl();
      break;
      }
    case AT:{
      notationDeclaration();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void classDecl() throws ParseException {Token classType;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:
      case FIELD_ACCESS:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      fieldAccess();
    }
    classType = jj_consume_token(CLASS_IDENTIFIER);
    identifier();
Token identifier=util.currentToken();
      currentCodeNodeClass=ICodeFactory.createICodeNodeClass();
      currentCodeNodeClass.setClassType(classType.image);
      ICodeNodeClass prevClass=null;
      String className=identifier.image;
      if(!classStack.empty())
        {
            prevClass=classStack.peek();
        }
      if(null!=prevClass)
      {
          String innerClassName=className;
          className=prevClass.getClassName()+"."+className;
          innerTypes.put(innerClassName,className);
      }
      currentCodeNodeClass.setClassName(className);
      currentCodeNodeClass.setNotationList(currentCodeNodeNotationList);
      currentCodeNodeClass.setImportList(importList);
      programCode.getRoot().addChild(currentCodeNodeClass);

      // Push at the top of the stack.
      classStack.add(currentCodeNodeClass);
      if(classStack.size()==1)
        {
            String importDecl="import "+packageName+"."+className+";";
            ICodeNodeImport importNode=ICodeFactory.createICodeNodeImport();
            importNode.setName(importDecl);
            importList.add(importNode);
        }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(EXTENDS);
      identifier();
Token baseToken=util.currentToken();
       currentCodeNodeClass.setBaseName(baseToken.image);
    }
util.synchronize(EntityConstants.LEFT_BRACE);// consume implementation,extension
      currentCodeNodeNotationList=null; // apply if any class notation and reset

    classBody();
// Pop from the top of the stack. Recover currentClass if any on top.
     classStack.pop();
     if(!classStack.empty()) {
          currentCodeNodeClass = classStack.peek();
      }
  }

  final public void headerDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPORT:{
      jj_consume_token(IMPORT);
String result="import ";
         result=util.consumeBetweenOpenCloseAsString(currentToken().kind,EntityConstants.SEMICOLON,result);// consume package
         result+=";";
         ICodeNodeImport importNode=ICodeFactory.createICodeNodeImport();
         importNode.setName(result);
         importList.add(importNode);
      semicolon();
      break;
      }
    case PACKAGE:{
      jj_consume_token(PACKAGE);
packageName=util.consumeBetweenOpenCloseAsString(currentToken().kind,EntityConstants.SEMICOLON,packageName);// consume package

      semicolon();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void classBody() throws ParseException {
    jj_consume_token(LEFT_BRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:
      case FIELD_ACCESS:
      case CLASS_IDENTIFIER:
      case AT:
      case LEFT_BRACE:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      if (jj_2_1(2147483647)) {
        classDecl();
      } else if (jj_2_2(2147483647)) {
        staticBlockStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT_BRACE:{
          blockStatement();
          break;
          }
        case AT:{
          notationDeclaration();
          break;
          }
        case STATIC:
        case FIELD_ACCESS:
        case IDENTIFIER:{
          memberDeclaration();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RIGHT_BRACE);
  }

  final public void notationDeclaration() throws ParseException {ICodeNodeKeyValue nodeKeyValue;
    jj_consume_token(AT);
    identifier();
Token identifier=util.currentToken();
        ICodeNodeNotation codeNodeNotation=ICodeFactory.createICodeNodeNotation();
        codeNodeNotation.setNotationName(identifier.image);
        if(null==currentCodeNodeNotationList)
        {
            currentCodeNodeNotationList=ICodeFactory.createICodeNodeNotationList();
        }
        currentCodeNodeNotationList.addNotation(codeNodeNotation);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_PAREN:{
      jj_consume_token(LEFT_PAREN);
      nodeKeyValue = notationStatement();
codeNodeNotation.addNotationProperty(nodeKeyValue);
      label_6:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        nodeKeyValue = notationStatement();
codeNodeNotation.addNotationProperty(nodeKeyValue);
      }
      jj_consume_token(RIGHT_PAREN);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  final public void memberDeclaration() throws ParseException {
    if (jj_2_4(2147483647)) {
      methodDeclaration();
    } else if (jj_2_5(2147483647)) {
      constructorDeclaration();
    } else if (jj_2_6(2147483647)) {
      classFieldDeclaration();
    } else if (jj_2_7(2147483647)) {
      enumFieldListDeclaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
currentCodeNodeNotationList=null; // apply if any member notation and reset

  }

  final public void classFieldDeclaration() throws ParseException {Token identifier;
    ICodeNodeField node;
    ICodeNodeTypeId codeNodeTypeDef;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:
      case FIELD_ACCESS:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      fieldAccess();
    }
    codeNodeTypeDef = typeIdentifier();
    identifier();
identifier=util.currentToken();
             node=ICodeFactory.createICodeNodeField();
             node.setFieldName(identifier.image);
                 node.setNotationList(currentCodeNodeNotationList);
             node.setFieldType(codeNodeTypeDef);
             currentCodeNodeClass.getFieldList().addChild(node);
    label_8:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      identifier();
identifier=util.currentToken();
             node=ICodeFactory.createICodeNodeField();
             node.setFieldName(identifier.image);
             node.setNotationList(currentCodeNodeNotationList);
             node.setFieldType(codeNodeTypeDef);
             currentCodeNodeClass.getFieldList().addChild(node);
    }
util.synchronize(EntityConstants.SEMICOLON);// consume definition

    semicolon();
  }

  final public void constructorDeclaration() throws ParseException {
    fieldAccess();
    identifier();
    parenthesesExpression();
util.synchronize(EntityConstants.LEFT_BRACE);// consume any throwable

    blockStatement();
  }

  final public void methodDeclaration() throws ParseException {Token identifier;
    ICodeNodeField node;
    ICodeNodeTypeId codeNodeTypeDef;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:
      case FIELD_ACCESS:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      fieldAccess();
    }
    codeNodeTypeDef = typeIdentifier();
    identifier();
identifier=util.currentToken();
         if(identifier.image.startsWith("get"))
         {
             node = ICodeFactory.createICodeNodeField();
             String name=identifier.image.substring(3);
             if(name.length()>1)
             {
                 name=name.substring(0,1)+name.substring(1);
             }
             node.setFieldName(name);
             node.setNotationList(currentCodeNodeNotationList);
             node.setFieldType(codeNodeTypeDef);
             if(null!=currentCodeNodeNotationList)
             for(ICodeNode item:currentCodeNodeNotationList.getChildren())
             {
                 if(isRelation(((ICodeNodeNotation) item).getNotationName()))
                 {
                     currentCodeNodeClass.getFieldList().addChild(node);
                     break;
                 }
             }
         }
    parenthesesExpression();
util.synchronize(EntityConstants.LEFT_BRACE);// consume any throwable

    blockStatement();
  }

  final public void staticBlockStatement() throws ParseException {
    jj_consume_token(STATIC);
    blockStatement();
currentCodeNodeNotationList=null; // reset notation

  }

  final public void blockStatement() throws ParseException {
    jj_consume_token(LEFT_BRACE);
util.consumeBetweenOpenClose(EntityConstants.LEFT_BRACE,EntityConstants.RIGHT_BRACE);
        currentCodeNodeNotationList=null; // reset notation

    jj_consume_token(RIGHT_BRACE);
  }

  final public void parenthesesExpression() throws ParseException {
    jj_consume_token(LEFT_PAREN);
util.consumeBetweenOpenClose(EntityConstants.LEFT_PAREN,EntityConstants.RIGHT_PAREN);
    jj_consume_token(RIGHT_PAREN);
  }

  final public void enumFieldListDeclaration() throws ParseException {ICodeNodeEnumConstant node;
    ICodeNodeIdentifier identifier;
    identifier = enumFieldDeclaration();
node=ICodeFactory.createICodeNodeEnumConstant();
        node.setFieldName(identifier.getName());
        node.setNotationList(currentCodeNodeNotationList);
        currentCodeNodeClass.getFieldList().addChild(node);
    label_10:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(COMMA);
      identifier = enumFieldDeclaration();
node=ICodeFactory.createICodeNodeEnumConstant();
            node.setFieldName(identifier.getName());
            node.setNotationList(currentCodeNodeNotationList);
            currentCodeNodeClass.getFieldList().addChild(node);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_11;
      }
      jj_consume_token(SEMICOLON);
    }
  }

  final public ICodeNodeIdentifier enumFieldDeclaration() throws ParseException {Token token;
    ICodeNodeIdentifier identifier=ICodeFactory.createICodeNodeIdentifier();
    if (jj_2_10(2)) {
      identifier = routineCall();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        identifier();
token=util.currentToken();
            identifier.setName(token.image);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return identifier;}
    throw new Error("Missing return statement in function");
  }

  final public ICodeNodeIdentifier routineCall() throws ParseException {ICodeNodeIdentifier identifier=ICodeFactory.createICodeNodeIdentifier();
    Token token;
    identifier();
token=util.currentToken();
        identifier.setName(token.image);
    jj_consume_token(LEFT_PAREN);
util.consumeBetweenOpenClose(EntityConstants.LEFT_PAREN,EntityConstants.RIGHT_PAREN);
    jj_consume_token(RIGHT_PAREN);
{if ("" != null) return identifier;}
    throw new Error("Missing return statement in function");
  }

  final public void identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  final public void semicolon() throws ParseException {
    label_12:
    while (true) {
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_12;
      }
    }
  }

  final public void fieldAccess() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FIELD_ACCESS:{
      jj_consume_token(FIELD_ACCESS);
      break;
      }
    case STATIC:{
      jj_consume_token(STATIC);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ICodeNodeTypeId typeIdentifier() throws ParseException {ICodeNodeName nodeName;
    ICodeNodeTypeId codeNodeTypeDef;
    ICodeNodeTypeId codeNodeTypeDefTemplate;
    nodeName = nameRet();
if(innerTypes.containsKey(nodeName.getLastName()))
            {
                nodeName.setFullName(innerTypes.get(nodeName.getLastName()));
            }
            Token identifier=util.currentToken();
            codeNodeTypeDef=ICodeFactory.createICodeNodeTypeId();
            codeNodeTypeDef.setName(nodeName);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS_THAN:{
      jj_consume_token(LESS_THAN);
      codeNodeTypeDefTemplate = typeIdentifier();
codeNodeTypeDef.addTemplateParam(codeNodeTypeDefTemplate);
      label_13:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(COMMA);
        codeNodeTypeDefTemplate = typeIdentifier();
codeNodeTypeDef.addTemplateParam(codeNodeTypeDefTemplate);
      }
      jj_consume_token(GREATER_THAN);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_BRACKET:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_14;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(RIGHT_BRACKET);
    }
{if ("" != null) return codeNodeTypeDef;}
    throw new Error("Missing return statement in function");
  }

  final public void typeIdentifierLookahead() throws ParseException {
    name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LESS_THAN:{
      jj_consume_token(LESS_THAN);
      typeIdentifierLookahead();
      label_15:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(COMMA);
        typeIdentifierLookahead();
      }
      jj_consume_token(GREATER_THAN);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_BRACKET:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_16;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(RIGHT_BRACKET);
    }
  }

  final public ICodeNodeKeyValue notationStatement() throws ParseException {ICodeNodeKeyValue nodeKeyValue=ICodeFactory.createICodeNodeKeyValue();
    ICodeNodeName nodeName;
    Token t;
    if (jj_2_13(2147483647)) {
      nodeKeyValue = assignmentStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        nodeName = nameRet();
nodeKeyValue.setValue(nodeName.getFullName());
            nodeKeyValue.setKey("");
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:{
        t = literal();
nodeKeyValue.setValue(t.image);
            nodeKeyValue.setKey("");
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodeKeyValue;}
    throw new Error("Missing return statement in function");
  }

  final public ICodeNodeKeyValue assignmentStatement() throws ParseException {Token t;
ICodeNodeName nodeNameKey;
ICodeNodeName nodeNameValue;
ICodeNodeKeyValue nodeKeyValue=ICodeFactory.createICodeNodeKeyValue();
    nodeNameKey = nameRet();
nodeKeyValue.setKey(nodeNameKey.getFullName());
    jj_consume_token(EQUALS);
    if (jj_2_14(2147483647)) {
util.synchronize(EntityConstants.RIGHT_BRACE);// consume implementation,extension

      jj_consume_token(RIGHT_BRACE);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        nodeNameValue = nameRet();
nodeKeyValue.setValue(nodeNameValue.getFullName());
        break;
        }
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case NULL:{
        t = literal();
nodeKeyValue.setValue(t.image);
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return nodeKeyValue;}
    throw new Error("Missing return statement in function");
  }

  final public Token booleanLiteral() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      t = jj_consume_token(TRUE);
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token nullLiteral() throws ParseException {Token t;
    t = jj_consume_token(NULL);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token literal() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      t = jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case FLOATING_POINT_LITERAL:{
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
      }
    case CHARACTER_LITERAL:{
      t = jj_consume_token(CHARACTER_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      t = jj_consume_token(STRING_LITERAL);
      break;
      }
    case TRUE:
    case FALSE:{
      t = booleanLiteral();
      break;
      }
    case NULL:{
      t = nullLiteral();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void name() throws ParseException {
    identifier();
    label_17:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(DOT);
      identifier();
    }
  }

  final public ICodeNodeName nameRet() throws ParseException {ICodeNodeName nodeName=ICodeFactory.createICodeNodeName();
    identifier();
ICodeNodeIdentifier nodeId=ICodeFactory.createICodeNodeIdentifier();
    nodeId.setName(util.currentToken().image);
    nodeName.addIdentifier(nodeId);
    label_18:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        identifier();
        break;
        }
      case CLASS_IDENTIFIER:{
        jj_consume_token(CLASS_IDENTIFIER);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
nodeId=ICodeFactory.createICodeNodeIdentifier();
        nodeId.setName(util.currentToken().image);
        nodeName.addIdentifier(nodeId);
    }
{if ("" != null) return nodeName;}
    throw new Error("Missing return statement in function");
  }

  final public void nameLookahead() throws ParseException {
    identifier();
    label_19:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(DOT);
      identifier();
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) return true;
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_23()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_24()) return true;
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_29()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_23()) return true;
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(43)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(LESS_THAN)) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GREATER_THAN)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(STATIC)) return true;
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLASS_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public EntityTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x300000,0x42f00000,0x42f00000,0x300000,0x1000000,0x2800000,0xc0700000,0xc0300000,0x0,0x300000,0x300000,0x0,0x0,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x380d1000,0x380d1000,0x18000000,0x380d1000,0x400000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x800,0x2,0x0,0x0,0x400,0x20,0x800,0x20,0x0,0x80,0x8,0x80,0x8,0x800,0x800,0x0,0x0,0x800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Entity(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Entity(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EntityTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Entity(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EntityTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Entity(EntityTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EntityTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
